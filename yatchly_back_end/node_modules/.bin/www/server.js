const http = require('http');
const hostname = '127.0.0.1';
const port = 3000;

var express = require('express')
var app = express()
var models = require('../models');
var bodyParser = require('body-parser')

app.use( bodyParser.json() );       // to support JSON-encoded bodies
app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
  extended: true
})); 

app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});

app.get('/', function (req, res) {
  res.send('Yatch App')
})

app.get('/api/user', function (req, res) {	
	models
	.User
	.findAll({where:{},
	}).then(function(users){
	  console.log(users);
	  res.send({status:'success',message:'',data:users});
	}).catch(function(err){
	  res.send({status:'error',message:'Failed to grab data'});
	});
});


app.post('/api/user/add', function (req, res) {
	var postData = req.body;

	var ret = {
			status : 'success',
			messages : []
			};
	console.log(postData);
	
	if (postData.name == undefined || postData.name == '')
	{
		ret.messages.push('Name must be filled');
	}
	
	if (postData.email == undefined || postData.email == '')
	{
		ret.messages.push('Email must be filled');
	}
	
	if (ret.messages.length > 0)
	{
		ret.status = 'error';
		res.send(ret);
	}
	
	
	models
	.User
	.findOrCreate({where: {email: postData.email}, defaults: postData})
	.spread((user, created) => {
		//console.log(user.get({plain: true}));
		ret.status = created ? 'success' : 'error';
		if (!created) ret.messages.push('Email ' + postData.email + ' already exists');
		res.send(ret);
	})
	.catch(function (error) {
		ret.status = 'error';
		ret.messages.push('Please try again.');
		res.send(ret);
	});
});

app.post('/api/user/edit', function (req, res) {
  var postData = req.body;
  var ret = {
			status : 'success',
			messages : []
			};
  console.log(postData);

  models
  .User
  .findByPk(postData.userID)
  .then(user => {   
		if (user) {
		  user.update(postData)
		  .then((user) => {
			  res.send(ret);
		  })
		  .catch(function(error) {
			  console.log(error);
			  ret.status = 'error';
			  ret.messages = GetErrors(error, postData);			  
			  res.send(ret);
		  });
		}
	});
});

app.post('/api/user/delete', function (req, res) {
	var postData = req.body;
	var ret = {
				status : 'success',
				messages : []
				};
	models
	.User
	.destroy({where: {userID : postData.userID}})
	.then(deleted => {   
		ret.status = deleted ? 'success' : 'error';
		if (!deleted) ret.messages.push('User not found.');
		res.send(ret);
	})
	.catch(function (error) {
	  console.log(error);
	});
});

app.post('/api/user/get', function (req, res) {
	var postData = req.body;
	var ret = {
				status : 'success',
				messages : []
				};
	
	models
	.User
	.findByPk(postData.userID)
	.then(user => {	
		if (user) {
			ret.data = user;
		}
		else ret.message = 'User not found';
		
		res.send(ret);
	});
});

app.listen(3000);

/*Tools*/

function GetErrors(error, obj)
{
	var messages = [];
	for (var prop in error.errors) {
		var tmp = error.errors[prop].message;
		if (tmp.indexOf('unique') > -1 && obj != undefined) error.errors[prop].message = tmp.split(" ")[0] + ' ' + obj.email + ' already exists';
		messages.push(error.errors[prop].message);
	}
	return messages;
}
